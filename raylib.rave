// Color, 4 components, R8G8B8A8 (32bit)
struct Color {
    uchar r;        // Color red value
    uchar g;        // Color green value
    uchar b;        // Color blue value
    uchar a;        // Color alpha value

    (inline) Color this(uchar r, uchar g, uchar b, uchar a) {
        Color this;
        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
    } => this;
}

// Vector2, 2 components
struct Vector2 {
    float x;                // Vector x component
    float y;                // Vector y component
}

// Vector3, 3 components
struct Vector3 {
    float x;                // Vector x component
    float y;                // Vector y component
    float z;                // Vector z component
}

// Vector4, 4 components
struct Vector4 {
    float x;                // Vector x component
    float y;                // Vector y component
    float z;                // Vector z component
    float w;                // Vector w component
}

// Matrix, 4x4 components, column major, OpenGL style, right-handed
struct Matrix {
    float m0; float m4; float m8; float m12;  // Matrix first row (4 components)
    float m1; float m5; float m9; float m13;  // Matrix second row (4 components)
    float m2; float m6; float m10; float m14; // Matrix third row (4 components)
    float m3; float m7; float m11; float m15; // Matrix fourth row (4 components)
}

// Rectangle, 4 components
struct Rectangle {
    float x;                // Rectangle top-left corner position x
    float y;                // Rectangle top-left corner position y
    float width;            // Rectangle width
    float height;           // Rectangle height
}

// Image, pixel data stored in CPU memory (RAM)
struct Image {
    void* data;             // Image raw data
    int width;              // Image base width
    int height;             // Image base height
    int mipmaps;            // Mipmap levels, 1 by default
    int format;             // Data format (PixelFormat type)
}

// Texture, tex data stored in GPU memory (VRAM)
struct Texture {
    uint id;        // OpenGL texture id
    int width;              // Texture base width
    int height;             // Texture base height
    int mipmaps;            // Mipmap levels, 1 by default
    int format;             // Data format (PixelFormat type)
}

// Audio processor struct
// NOTE: Useful to apply effects to an AudioBuffer
struct rAudioProcessor {
    void(void*, uint) process;          // Processor callback function
    rAudioProcessor* next;          // Next audio processor on the list
    rAudioProcessor* prev;          // Previous audio processor on the list
}

type Texture2D = Texture;

// NPatchInfo, n-patch layout info
struct NPatchInfo {
    Rectangle source;       // Texture source rectangle
    int left;               // Left border offset
    int top;                // Top border offset
    int right;              // Right border offset
    int bottom;             // Bottom border offset
    int layout;             // Layout of the n-patch: 3x3, 1x3 or 3x1
}

// GlyphInfo, font characters glyphs info
struct GlyphInfo {
    int value;              // Character value (Unicode)
    int offsetX;            // Character offset X when drawing
    int offsetY;            // Character offset Y when drawing
    int advanceX;           // Character advance position X
    Image image;            // Character image data
}

// Font, font texture and GlyphInfo array data
struct Font {
    int baseSize;           // Base size (default chars height)
    int glyphCount;         // Number of glyph characters
    int glyphPadding;       // Padding around the glyph characters
    Texture2D texture;      // Texture atlas containing the glyphs
    Rectangle* recs;        // Rectangles in texture for the glyphs
    GlyphInfo* glyphs;      // Glyphs info data
}

alias CAMERA_CUSTOM = 0;
alias CAMERA_FREE = 1;
alias CAMERA_ORBITAL = 2;
alias CAMERA_FIRST_PERSON = 3;
alias CAMERA_THIRD_PERSON = 4;

alias CAMERA_PERSPECTIVE = 0;
alias CAMERA_ORTHOGRAPHIC = 1;

// Camera, defines position/orientation in 3d space
struct Camera3D {
    Vector3 position;       // Camera position
    Vector3 target;         // Camera target it looks-at
    Vector3 up;             // Camera up vector (rotation over its axis)
    float fovy;             // Camera field-of-view aperture in Y (degrees) in perspective, used as near plane width in orthographic
    int projection;         // Camera projection: CAMERA_PERSPECTIVE or CAMERA_ORTHOGRAPHIC
}

type Camera = Camera3D;

// Camera2D, defines position/orientation in 2d space
struct Camera2D {
    Vector2 offset;         // Camera offset (displacement from target)
    Vector2 target;         // Camera target (rotation and zoom origin)
    float rotation;         // Camera rotation in degrees
    float zoom;             // Camera zoom (scaling), should be 1.0f by default
}

// RenderTexture, fbo for texture rendering
struct RenderTexture {
    uint id;        // OpenGL framebuffer object id
    Texture texture;        // Color buffer attachment texture
    Texture depth;          // Depth buffer attachment texture
}

// RenderTexture2D, same as RenderTexture
type RenderTexture2D = RenderTexture;

// Shader
struct Shader {
    uint id;        // Shader program id
    int* locs;              // Shader locations array (RL_MAX_SHADER_LOCATIONS)
}

// VrDeviceInfo, Head-Mounted-Display device parameters
struct VrDeviceInfo {
    int hResolution;                // Horizontal resolution in pixels
    int vResolution;                // Vertical resolution in pixels
    float hScreenSize;              // Horizontal size in meters
    float vScreenSize;              // Vertical size in meters
    float eyeToScreenDistance;      // Distance between eye and display in meters
    float lensSeparationDistance;   // Lens separation distance in meters
    float interpupillaryDistance;   // IPD (distance between pupils) in meters
    float[4] lensDistortionValues;  // Lens distortion constant parameters
    float[4] chromaAbCorrection;    // Chromatic aberration correction parameters
}

// VrStereoConfig, VR stereo rendering configuration for simulator
struct VrStereoConfig {
    Matrix[2] projection;           // VR projection matrices (per eye)
    Matrix[2] viewOffset;           // VR view offset matrices (per eye)
    float[2] leftLensCenter;        // VR left lens center
    float[2] rightLensCenter;       // VR right lens center
    float[2] leftScreenCenter;      // VR left screen center
    float[2] rightScreenCenter;     // VR right screen center
    float[2] scale;                 // VR distortion scale
    float[2] scaleIn;               // VR distortion scale in
}

// Ray, ray for raycasting
struct Ray {
    Vector3 position;       // Ray position (origin)
    Vector3 direction;      // Ray direction (normalized)
}

// RayCollision, ray hit information
struct RayCollision {
    int hit;               // Did the ray hit something?
    float distance;         // Distance to the nearest hit
    Vector3 point;          // Point of the nearest hit
    Vector3 normal;         // Surface normal of hit
}

// Wave, audio wave data
struct Wave {
    uint frameCount;    // Total number of frames (considering channels)
    uint sampleRate;    // Frequency (samples per second)
    uint sampleSize;    // Bit depth (bits per sample): 8, 16, 32 (24 not supported)
    uint channels;      // Number of channels (1-mono, 2-stereo, ...)
    void* data;                 // Buffer data pointer
}

// Audio buffer struct
struct rAudioBuffer {
    void* converter;    // Audio data converter (ma_data_converter?)

    void(void*, uint) callback;         // Audio buffer callback for buffer filling on audio threads
    rAudioProcessor* processor;     // Audio processor

    float volume;                   // Audio buffer volume
    float pitch;                    // Audio buffer pitch
    float pan;                      // Audio buffer pan (0.0f to 1.0f)

    int playing;                   // Audio buffer state: AUDIO_PLAYING
    int paused;                    // Audio buffer state: AUDIO_PAUSED
    int looping;                   // Audio buffer looping, default to true for AudioStreams
    int usage;                      // Audio buffer usage mode: STATIC or STREAM

    int[2] isSubBufferProcessed;   // SubBuffer processed (virtual double buffer)
    uint sizeInFrames;      // Total buffer size in frames
    uint frameCursorPos;    // Frame cursor position
    uint framesProcessed;   // Total frames processed in this buffer (required for play timing)

    uchar* data;            // Data buffer, on music stream keeps filling

    rAudioBuffer* next;             // Next audio buffer on the list
    rAudioBuffer* prev;             // Previous audio buffer on the list
}

// AudioStream, custom audio stream
struct AudioStream {
    rAudioBuffer* buffer;       // Pointer to internal data used by the audio system
    rAudioProcessor* processor; // Pointer to internal data processor, useful for audio effects

    uint sampleRate;    // Frequency (samples per second)
    uint sampleSize;    // Bit depth (bits per sample): 8, 16, 32 (24 not supported)
    uint channels;      // Number of channels (1-mono, 2-stereo, ...)
}

// Sound
struct Sound {
    AudioStream stream;         // Audio stream
    uint frameCount;    // Total number of frames (considering channels)
}

// Music, audio stream, anything longer than ~10 seconds should be streamed
struct Music {
    AudioStream stream;         // Audio stream
    uint frameCount;    // Total number of frames (considering channels)
    int looping;               // Music looping enable

    int ctxType;                // Type of music context (audio filetype)
    void* ctxData;              // Audio context data, depends on type
}

alias KEY_NULL            = 0;        // Key: NULL, used for no key pressed
alias KEY_APOSTROPHE      = 39;      // Key: '
alias KEY_COMMA           = 44;      // Key: ,
alias KEY_MINUS           = 45;      // Key: -
alias KEY_PERIOD          = 46;      // Key: .
alias KEY_SLASH           = 47;      // Key: /
alias KEY_ZERO            = 48;      // Key: 0
alias KEY_ONE             = 49;      // Key: 1
alias KEY_TWO             = 50;      // Key: 2
alias KEY_THREE           = 51;      // Key: 3
alias KEY_FOUR            = 52;      // Key: 4
alias KEY_FIVE            = 53;      // Key: 5
alias KEY_SIX             = 54;      // Key: 6
alias KEY_SEVEN           = 55;      // Key: 7
alias KEY_EIGHT           = 56;      // Key: 8
alias KEY_NINE            = 57;      // Key: 9
alias KEY_SEMICOLON       = 59;      // Key: ;
alias KEY_EQUAL           = 61;      // Key: =
alias KEY_A               = 65;      // Key: A | a
alias KEY_B               = 66;      // Key: B | b
alias KEY_C               = 67;      // Key: C | c
alias KEY_D               = 68;      // Key: D | d
alias KEY_E               = 69;      // Key: E | e
alias KEY_F               = 70;      // Key: F | f
alias KEY_G               = 71;      // Key: G | g
alias KEY_H               = 72;      // Key: H | h
alias KEY_I               = 73;      // Key: I | i
alias KEY_J               = 74;      // Key: J | j
alias KEY_K               = 75;      // Key: K | k
alias KEY_L               = 76;      // Key: L | l
alias KEY_M               = 77;      // Key: M | m
alias KEY_N               = 78;      // Key: N | n
alias KEY_O               = 79;      // Key: O | o
alias KEY_P               = 80;      // Key: P | p
alias KEY_Q               = 81;      // Key: Q | q
alias KEY_R               = 82;      // Key: R | r
alias KEY_S               = 83;      // Key: S | s
alias KEY_T               = 84;      // Key: T | t
alias KEY_U               = 85;      // Key: U | u
alias KEY_V               = 86;      // Key: V | v
alias KEY_W               = 87;      // Key: W | w
alias KEY_X               = 88;      // Key: X | x
alias KEY_Y               = 89;      // Key: Y | y
alias KEY_Z               = 90;      // Key: Z | z
alias KEY_LEFT_BRACKET    = 91;      // Key: [
alias KEY_BACKSLASH       = 92;      // Key: '\'
alias KEY_RIGHT_BRACKET   = 93;      // Key: ]
alias KEY_GRAVE           = 96;      // Key: `

alias KEY_SPACE           = 32;      // Key: Space
alias KEY_ESCAPE          = 256;      // Key: Esc
alias KEY_ENTER           = 257;      // Key: Enter
alias KEY_TAB             = 258;      // Key: Tab
alias KEY_BACKSPACE       = 259;      // Key: Backspace
alias KEY_INSERT          = 260;      // Key: Ins
alias KEY_DELETE          = 261;      // Key: Del
alias KEY_RIGHT           = 262;      // Key: Cursor right
alias KEY_LEFT            = 263;      // Key: Cursor left
alias KEY_DOWN            = 264;      // Key: Cursor down
alias KEY_UP              = 265;      // Key: Cursor up
alias KEY_PAGE_UP         = 266;      // Key: Page up
alias KEY_PAGE_DOWN       = 267;      // Key: Page down
alias KEY_HOME            = 268;      // Key: Home
alias KEY_END             = 269;      // Key: End
alias KEY_CAPS_LOCK       = 280;      // Key: Caps lock
alias KEY_SCROLL_LOCK     = 281;      // Key: Scroll down
alias KEY_NUM_LOCK        = 282;      // Key: Num lock
alias KEY_PRINT_SCREEN    = 283;      // Key: Print screen
alias KEY_PAUSE           = 284;      // Key: Pause
alias KEY_F1              = 290;      // Key: F1
alias KEY_F2              = 291;      // Key: F2
alias KEY_F3              = 292;      // Key: F3
alias KEY_F4              = 293;      // Key: F4
alias KEY_F5              = 294;      // Key: F5
alias KEY_F6              = 295;      // Key: F6
alias KEY_F7              = 296;      // Key: F7
alias KEY_F8              = 297;      // Key: F8
alias KEY_F9              = 298;      // Key: F9
alias KEY_F10             = 299;      // Key: F10
alias KEY_F11             = 300;      // Key: F11
alias KEY_F12             = 301;      // Key: F12
alias KEY_LEFT_SHIFT      = 340;      // Key: Shift left
alias KEY_LEFT_CONTROL    = 341;      // Key: Control left
alias KEY_LEFT_ALT        = 342;      // Key: Alt left
alias KEY_LEFT_SUPER      = 343;      // Key: Super left
alias KEY_RIGHT_SHIFT     = 344;      // Key: Shift right
alias KEY_RIGHT_CONTROL   = 345;      // Key: Control right
alias KEY_RIGHT_ALT       = 346;      // Key: Alt right
alias KEY_RIGHT_SUPER     = 347;      // Key: Super right
alias KEY_KB_MENU         = 348;      // Key: KB menu

alias KEY_KP_0            = 320;      // Key: Keypad 0
alias KEY_KP_1            = 321;      // Key: Keypad 1
alias KEY_KP_2            = 322;      // Key: Keypad 2
alias KEY_KP_3            = 323;      // Key: Keypad 3
alias KEY_KP_4            = 324;      // Key: Keypad 4
alias KEY_KP_5            = 325;      // Key: Keypad 5
alias KEY_KP_6            = 326;      // Key: Keypad 6
alias KEY_KP_7            = 327;      // Key: Keypad 7
alias KEY_KP_8            = 328;      // Key: Keypad 8
alias KEY_KP_9            = 329;      // Key: Keypad 9
alias KEY_KP_DECIMAL      = 330;      // Key: Keypad .
alias KEY_KP_DIVIDE       = 331;      // Key: Keypad /
alias KEY_KP_MULTIPLY     = 332;      // Key: Keypad *
alias KEY_KP_SUBTRACT     = 333;      // Key: Keypad -
alias KEY_KP_ADD          = 334;      // Key: Keypad +
alias KEY_KP_ENTER        = 335;      // Key: Keypad Enter
alias KEY_KP_EQUAL        = 336;      // Key: Keypad =

alias KEY_BACK            = 4;      // Key: Android back button
alias KEY_MENU            = 5;      // Key: Android menu button
alias KEY_VOLUME_UP       = 24;      // Key: Android volume up button
alias KEY_VOLUME_DOWN     = 25;      // Key: Android volume down button

// Mouse buttons
alias MOUSE_BUTTON_LEFT    = 0;       // Mouse button left
alias MOUSE_BUTTON_RIGHT   = 1;       // Mouse button right
alias MOUSE_BUTTON_MIDDLE  = 2;       // Mouse button middle (pressed wheel)
alias MOUSE_BUTTON_SIDE    = 3;       // Mouse button side (advanced mouse device)
alias MOUSE_BUTTON_EXTRA   = 4;       // Mouse button extra (advanced mouse device)
alias MOUSE_BUTTON_FORWARD = 5;       // Mouse button forward (advanced mouse device)
alias MOUSE_BUTTON_BACK    = 6;       // Mouse button back (advanced mouse device)

// Add backwards compatibility support for deprecated names
alias MOUSE_LEFT_BUTTON  = MOUSE_BUTTON_LEFT;
alias MOUSE_RIGHT_BUTTON = MOUSE_BUTTON_RIGHT;
alias MOUSE_MIDDLE_BUTTON = MOUSE_BUTTON_MIDDLE;

// Custom raylib color palette for amazing visuals on WHITE background
alias LIGHTGRAY  = Color{ 200c, 200c, 200c, 255c };   // Light Gray
alias GRAY       = Color{ 130c, 130c, 130c, 255c };   // Gray
alias DARKGRAY   = Color{ 80c, 80c, 80c, 255c };      // Dark Gray
alias YELLOW     = Color{ 253c, 249c, 0c, 255c };     // Yellow
alias GOLD       = Color{ 255c, 203c, 0c, 255c };     // Gold
alias ORANGE     = Color{ 255c, 161c, 0c, 255c };     // Orange
alias PINK       = Color{ 255c, 109c, 194c, 255c };   // Pink
alias RED        = Color{ 230c, 41c, 55c, 255c };     // Red
alias MAROON     = Color{ 190c, 33c, 55c, 255c };     // Maroon
alias GREEN      = Color{ 0c, 228c, 48c, 255c };      // Green
alias LIME       = Color{ 0c, 158c, 47c, 255c };      // Lime
alias DARKGREEN  = Color{ 0c, 117c, 44c, 255c };      // Dark Green
alias SKYBLUE    = Color{ 102c, 191c, 255c, 255c };   // Sky Blue
alias BLUE       = Color{ 0c, 121c, 241c, 255c };     // Blue
alias DARKBLUE   = Color{ 0c, 82c, 172c, 255c };      // Dark Blue
alias PURPLE     = Color{ 200c, 122c, 255c, 255c };   // Purple
alias VIOLET     = Color{ 135c, 60c, 190c, 255c };    // Violet
alias DARKPURPLE = Color{ 112c, 31c, 126c, 255c };    // Dark Purple
alias BEIGE      = Color{ 211c, 176c, 131c, 255c };   // Beige
alias BROWN      = Color{ 127c, 106c, 79c, 255c };    // Brown
alias DARKBROWN  = Color{ 76c, 63c, 47c, 255c };      // Dark Brown
alias WHITE      = Color{ 255c, 255c, 255c, 255c };   // White
alias BLACK      = Color{ 0c, 0c, 0c, 255c };         // Black
alias BLANK      = Color{ 0c, 0c, 0c, 0c };           // Blank (Transparent)
alias MAGENTA    = Color{ 255c, 0c, 255c, 255c };     // Magenta
alias RAYWHITE   = Color{ 245c, 245c, 245c, 255c };   // My own White (raylib logo)

// Gesture
// NOTE: Provided as bit-wise flags to enable only desired gestures
alias GESTURE_NONE        = 0;     // No gesture
alias GESTURE_TAP         = 1;     // Tap gesture
alias GESTURE_DOUBLETAP   = 2;     // Double tap gesture
alias GESTURE_HOLD        = 4;     // Hold gesture
alias GESTURE_DRAG        = 8;     // Drag gesture
alias GESTURE_SWIPE_RIGHT = 16;     // Swipe right gesture
alias GESTURE_SWIPE_LEFT  = 32;     // Swipe left gesture
alias GESTURE_SWIPE_UP    = 64;     // Swipe up gesture
alias GESTURE_SWIPE_DOWN  = 128;     // Swipe down gesture
alias GESTURE_PINCH_IN    = 256;     // Pinch in gesture
alias GESTURE_PINCH_OUT   = 512;     // Pinch out gesture

//------------------------------------------------------------------------------------
// Gestures and Touch Handling Functions (Module: rgestures)
//------------------------------------------------------------------------------------
extern(C, cdecl64) void SetGesturesEnabled(uint flags);      // Enable a set of gestures using flags
extern(C, cdecl64) char IsGestureDetected(uint gesture);     // Check if a gesture have been detected
extern(C, cdecl64) int GetGestureDetected();                     // Get latest detected gesture
extern(C, cdecl64) float GetGestureHoldDuration();               // Get gesture hold time in milliseconds
extern(C, cdecl64) Vector2 GetGestureDragVector();               // Get gesture drag vector
extern(C, cdecl64) float GetGestureDragAngle();                  // Get gesture drag angle
extern(C, cdecl64) Vector2 GetGesturePinchVector();              // Get gesture pinch delta
extern(C, cdecl64) float GetGesturePinchAngle();                 // Get gesture pinch angle

// Window-related functions
extern(C, cdecl64) void InitWindow(int width, int height, char* title);  // Initialize window and OpenGL context
extern(C, cdecl64) void CloseWindow();                                     // Close window and unload OpenGL context
extern(C, cdecl64) char WindowShouldClose();                               // Check if application should close (KEY_ESCAPE pressed or windows close icon clicked)
extern(C, cdecl64) char IsWindowReady();                                   // Check if window has been initialized successfully
extern(C, cdecl64) char IsWindowFullscreen();                              // Check if window is currently fullscreen
extern(C, cdecl64) char IsWindowHidden();                                  // Check if window is currently hidden (only PLATFORM_DESKTOP)
extern(C, cdecl64) char IsWindowMinimized();                               // Check if window is currently minimized (only PLATFORM_DESKTOP)
extern(C, cdecl64) char IsWindowMaximized();                               // Check if window is currently maximized (only PLATFORM_DESKTOP)
extern(C, cdecl64) char IsWindowFocused();                                 // Check if window is currently focused (only PLATFORM_DESKTOP)
extern(C, cdecl64) char IsWindowResized();                                 // Check if window has been resized last frame
extern(C, cdecl64) char IsWindowState(int flag);                      // Check if one specific window flag is enabled
extern(C, cdecl64) void SetWindowState(int flags);                    // Set window configuration state using flags (only PLATFORM_DESKTOP)
extern(C, cdecl64) void ClearWindowState(int flags);                  // Clear window configuration state flags
extern(C, cdecl64) void ToggleFullscreen();                                // Toggle window state: fullscreen/windowed (only PLATFORM_DESKTOP)
extern(C, cdecl64) void ToggleBorderlessWindowed();                        // Toggle window state: borderless windowed (only PLATFORM_DESKTOP)
extern(C, cdecl64) void MaximizeWindow();                                  // Set window state: maximized, if resizable (only PLATFORM_DESKTOP)
extern(C, cdecl64) void MinimizeWindow();                                  // Set window state: minimized, if resizable (only PLATFORM_DESKTOP)
extern(C, cdecl64) void RestoreWindow();                                   // Set window state: not minimized/maximized (only PLATFORM_DESKTOP)
extern(C, cdecl64) void SetWindowIcon(Image image);                            // Set icon for window (single image, RGBA 32bit, only PLATFORM_DESKTOP)
extern(C, cdecl64) void SetWindowIcons(Image* images, int count);              // Set icon for window (multiple images, RGBA 32bit, only PLATFORM_DESKTOP)
extern(C, cdecl64) void SetWindowTitle(char* title);                     // Set title for window (only PLATFORM_DESKTOP and PLATFORM_WEB)
extern(C, cdecl64) void SetWindowPosition(int x, int y);                       // Set window position on screen (only PLATFORM_DESKTOP)
extern(C, cdecl64) void SetWindowMonitor(int monitor);                         // Set monitor for the current window
extern(C, cdecl64) void SetWindowMinSize(int width, int height);               // Set window minimum dimensions (for FLAG_WINDOW_RESIZABLE)
extern(C, cdecl64) void SetWindowMaxSize(int width, int height);               // Set window maximum dimensions (for FLAG_WINDOW_RESIZABLE)
extern(C, cdecl64) void SetWindowSize(int width, int height);                  // Set window dimensions
extern(C, cdecl64) void SetWindowOpacity(float opacity);                       // Set window opacity [0.0f..1.0f] (only PLATFORM_DESKTOP)
extern(C, cdecl64) void SetWindowFocused();                                // Set window focused (only PLATFORM_DESKTOP)
extern(C, cdecl64) void* GetWindowHandle();                                // Get native window handle
extern(C, cdecl64) int GetScreenWidth();                                   // Get current screen width
extern(C, cdecl64) int GetScreenHeight();                                  // Get current screen height
extern(C, cdecl64) int GetRenderWidth();                                   // Get current render width (it considers HiDPI)
extern(C, cdecl64) int GetRenderHeight();                                  // Get current render height (it considers HiDPI)
extern(C, cdecl64) int GetMonitorCount();                                  // Get number of connected monitors
extern(C, cdecl64) int GetCurrentMonitor();                                // Get current connected monitor
extern(C, cdecl64) Vector2 GetMonitorPosition(int monitor);                    // Get specified monitor position
extern(C, cdecl64) int GetMonitorWidth(int monitor);                           // Get specified monitor width (current video mode used by monitor)
extern(C, cdecl64) int GetMonitorHeight(int monitor);                          // Get specified monitor height (current video mode used by monitor)
extern(C, cdecl64) int GetMonitorPhysicalWidth(int monitor);                   // Get specified monitor physical width in millimetres
extern(C, cdecl64) int GetMonitorPhysicalHeight(int monitor);                  // Get specified monitor physical height in millimetres
extern(C, cdecl64) int GetMonitorRefreshRate(int monitor);                     // Get specified monitor refresh rate
extern(C, cdecl64) Vector2 GetWindowPosition();                            // Get window position XY on monitor
extern(C, cdecl64) Vector2 GetWindowScaleDPI();                            // Get window scale DPI factor
extern(C, cdecl64) char* GetMonitorName(int monitor);                    // Get the human-readable, UTF-8 encoded name of the specified monitor
extern(C, cdecl64) void SetClipboardText(char* text);                    // Set clipboard text content
extern(C, cdecl64) char* GetClipboardText();                         // Get clipboard text content
extern(C, cdecl64) void EnableEventWaiting();                              // Enable waiting for events on EndDrawing(), no automatic event polling
extern(C, cdecl64) void DisableEventWaiting();                             // Disable waiting for events on EndDrawing(), automatic events pollingextern(C, cdecl64) 
// Cursor-related functions
extern(C, cdecl64) void ShowCursor();                                      // Shows cursor
extern(C, cdecl64) void HideCursor();                                      // Hides cursor
extern(C, cdecl64) char IsCursorHidden();                                  // Check if cursor is not visible
extern(C, cdecl64) void EnableCursor();                                    // Enables cursor (unlock cursor)
extern(C, cdecl64) void DisableCursor();                                   // Disables cursor (lock cursor)
extern(C, cdecl64) char IsCursorOnScreen();                                // Check if cursor is on the screenextern(C, cdecl64) 
// Drawing-related functions
extern(C, cdecl64) void ClearBackground(Color color);                          // Set background color (framebuffer clear color)
extern(C, cdecl64) void BeginDrawing();                                    // Setup canvas (framebuffer) to start drawing
extern(C, cdecl64) void EndDrawing();                                      // End canvas drawing and swap buffers (double buffering)
extern(C, cdecl64) void BeginMode2D(Camera2D camera);                          // Begin 2D mode with custom camera (2D)
extern(C, cdecl64) void EndMode2D();                                       // Ends 2D mode with custom camera
extern(C, cdecl64) void BeginMode3D(Camera3D camera);                          // Begin 3D mode with custom camera (3D)
extern(C, cdecl64) void EndMode3D();                                       // Ends 3D mode and returns to default 2D orthographic mode
extern(C, cdecl64) void BeginTextureMode(RenderTexture2D target);              // Begin drawing to render texture
extern(C, cdecl64) void EndTextureMode();                                  // Ends drawing to render texture
extern(C, cdecl64) void BeginShaderMode(Shader shader);                        // Begin custom shader drawing
extern(C, cdecl64) void EndShaderMode();                                   // End custom shader drawing (use default shader)
extern(C, cdecl64) void BeginBlendMode(int mode);                              // Begin blending mode (alpha, additive, multiplied, subtract, custom)
extern(C, cdecl64) void EndBlendMode();                                    // End blending mode (reset to default: alpha blending)
extern(C, cdecl64) void BeginScissorMode(int x, int y, int width, int height); // Begin scissor mode (define screen area for following drawing)
extern(C, cdecl64) void EndScissorMode();                                  // End scissor mode
extern(C, cdecl64) void BeginVrStereoMode(VrStereoConfig config);              // Begin stereo rendering (requires VR simulator)
extern(C, cdecl64) void EndVrStereoMode();                                 // End stereo rendering (requires VR simulator)extern(C, cdecl64) 
// VR stereo config functions for VR simulator
extern(C, cdecl64) VrStereoConfig LoadVrStereoConfig(VrDeviceInfo device);     // Load VR stereo config for VR simulator device parameters
extern(C, cdecl64) void UnloadVrStereoConfig(VrStereoConfig config);           // Unload VR stereo configextern(C, cdecl64) 
// Shader management functions
// NOTE: Shader functionality is not available on OpenGL 1.1
extern(C, cdecl64) Shader LoadShader(char* vsFileName, char* fsFileName);   // Load shader from files and bind default locations
extern(C, cdecl64) Shader LoadShaderFromMemory(char* vsCode, char* fsCode); // Load shader from code strings and bind default locations
extern(C, cdecl64) char IsShaderReady(Shader shader);                                   // Check if a shader is ready
extern(C, cdecl64) int GetShaderLocation(Shader shader, char* uniformName);       // Get shader uniform location
extern(C, cdecl64) int GetShaderLocationAttrib(Shader shader, char* attribName);  // Get shader attribute location
extern(C, cdecl64) void SetShaderValue(Shader shader, int locIndex, void *value, int uniformType);               // Set shader uniform value
extern(C, cdecl64) void SetShaderValueV(Shader shader, int locIndex, void *value, int uniformType, int count);   // Set shader uniform value vector
extern(C, cdecl64) void SetShaderValueMatrix(Shader shader, int locIndex, Matrix mat);         // Set shader uniform value (matrix 4x4)
extern(C, cdecl64) void SetShaderValueTexture(Shader shader, int locIndex, Texture2D texture); // Set shader uniform value for texture (sampler2d)
extern(C, cdecl64) void UnloadShader(Shader shader);                                    // Unload shader from GPU memory (VRAM)extern(C, cdecl64) 
// Screen-space-related functions
extern(C, cdecl64) Ray GetMouseRay(Vector2 mousePosition, Camera camera);      // Get a ray trace from mouse position
extern(C, cdecl64) Matrix GetCameraMatrix(Camera camera);                      // Get camera transform matrix (view matrix)
extern(C, cdecl64) Matrix GetCameraMatrix2D(Camera2D camera);                  // Get camera 2d transform matrix
extern(C, cdecl64) Vector2 GetWorldToScreen(Vector3 position, Camera camera);  // Get the screen space position for a 3d world space position
extern(C, cdecl64) Vector2 GetScreenToWorld2D(Vector2 position, Camera2D camera); // Get the world space position for a 2d camera screen space position
extern(C, cdecl64) Vector2 GetWorldToScreenEx(Vector3 position, Camera camera, int width, int height); // Get size position for a 3d world space position
extern(C, cdecl64) Vector2 GetWorldToScreen2D(Vector2 position, Camera2D camera); // Get the screen space position for a 2d camera world space positionextern(C, cdecl64) 
// Timing-related functions
extern(C, cdecl64) void SetTargetFPS(int fps);                                 // Set target FPS (maximum)
extern(C, cdecl64) float GetFrameTime();                                   // Get time in seconds for last frame drawn (delta time)
extern(C, cdecl64) double GetTime();                                       // Get elapsed time in seconds since InitWindow()
extern(C, cdecl64) int GetFPS();                                           // Get current FPSextern(C, cdecl64) 
// Custom frame control functions
// NOTE: Those functions are intended for advance users that want full control over the frame processing
// By default EndDrawing() does this job: draws everything + SwapScreenBuffer() + manage frame timing + PollInputEvents()
// To avoid that behaviour and control frame processes manually, enable in config.h: SUPPORT_CUSTOM_FRAME_CONTROL
extern(C, cdecl64) void SwapScreenBuffer();                                // Swap back buffer with front buffer (screen drawing)
extern(C, cdecl64) void PollInputEvents();                                 // Register all input events
extern(C, cdecl64) void WaitTime(double seconds);                              // Wait for some time (halt program execution)extern(C, cdecl64) 
// Random values generation functions
extern(C, cdecl64) void SetRandomSeed(int seed);                      // Set the seed for the random number generator
extern(C, cdecl64) int GetRandomValue(int min, int max);                       // Get a random value between min and max (both included)
extern(C, cdecl64) int* LoadRandomSequence(int count, int min, int max); // Load random values sequence, no values repeated
extern(C, cdecl64) void UnloadRandomSequence(int* sequence);                   // Unload random values sequenceextern(C, cdecl64) 
// Misc. functions
extern(C, cdecl64) void TakeScreenshot(char* fileName);                  // Takes a screenshot of current screen (filename extension defines format)
extern(C, cdecl64) void SetConfigFlags(int flags);                    // Setup init configuration flags (view FLAGS)
extern(C, cdecl64) void OpenURL(char* url);                              // Open URL with default system browser (if available)extern(C, cdecl64) 
// NOTE: Following functions implemented in module [utils]
//------------------------------------------------------------------
extern(C, vararg) void TraceLog(int logLevel, char* text);         // Show trace log messages (LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR...)
extern(C, cdecl64) void SetTraceLogLevel(int logLevel);                        // Set the current threshold (minimum) log level
extern(C, cdecl64) void* MemAlloc(int size);                          // Internal memory allocator
extern(C, cdecl64) void* MemRealloc(void* ptr, int size);             // Internal memory reallocator
extern(C, cdecl64) void MemFree(void* ptr);                                    // Internal memory free

// NOTE: It can be useful when using basic shapes and one single font,
// defining a font char white rectangle would allow drawing everything in a single draw call
extern(C, cdecl64) void SetShapesTexture(Texture2D texture, Rectangle source);       // Set texture and rectangle to be used on shapes drawing
// Basic shapes drawing functions
extern(C, cdecl64) void DrawPixel(int posX, int posY, Color color);                                                   // Draw a pixel
extern(C, cdecl64) void DrawPixelV(Vector2 position, Color color);                                                    // Draw a pixel (Vector version)
extern(C, cdecl64) void DrawLine(int startPosX, int startPosY, int endPosX, int endPosY, Color color);                // Draw a line
extern(C, cdecl64) void DrawLineV(Vector2 startPos, Vector2 endPos, Color color);                                     // Draw a line (using gl lines)
extern(C, cdecl64) void DrawLineEx(Vector2 startPos, Vector2 endPos, float thick, Color color);                       // Draw a line (using triangles/quads)
extern(C, cdecl64) void DrawLineStrip(Vector2* points, int pointCount, Color color);                                  // Draw lines sequence (using gl lines)
extern(C, cdecl64) void DrawLineBezier(Vector2 startPos, Vector2 endPos, float thick, Color color);                   // Draw line segment cubic-bezier in-out interpolation
extern(C, cdecl64) void DrawCircle(int centerX, int centerY, float radius, Color color);                              // Draw a color-filled circle
extern(C, cdecl64) void DrawCircleSector(Vector2 center, float radius, float startAngle, float endAngle, int segments, Color color);      // Draw a piece of a circle
extern(C, cdecl64) void DrawCircleSectorLines(Vector2 center, float radius, float startAngle, float endAngle, int segments, Color color); // Draw circle sector outline
extern(C, cdecl64) void DrawCircleGradient(int centerX, int centerY, float radius, Color color1, Color color2);       // Draw a gradient-filled circle
extern(C, cdecl64) void DrawCircleV(Vector2 center, float radius, Color color);                                       // Draw a color-filled circle (Vector version)
extern(C, cdecl64) void DrawCircleLines(int centerX, int centerY, float radius, Color color);                         // Draw circle outline
extern(C, cdecl64) void DrawCircleLinesV(Vector2 center, float radius, Color color);                                  // Draw circle outline (Vector version)
extern(C, cdecl64) void DrawEllipse(int centerX, int centerY, float radiusH, float radiusV, Color color);             // Draw ellipse
extern(C, cdecl64) void DrawEllipseLines(int centerX, int centerY, float radiusH, float radiusV, Color color);        // Draw ellipse outline
extern(C, cdecl64) void DrawRing(Vector2 center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, Color color); // Draw ring
extern(C, cdecl64) void DrawRingLines(Vector2 center, float innerRadius, float outerRadius, float startAngle, float endAngle, int segments, Color color);    // Draw ring outline
extern(C, cdecl64) void DrawRectangle(int posX, int posY, int width, int height, Color color);                        // Draw a color-filled rectangle
extern(C, cdecl64) void DrawRectangleV(Vector2 position, Vector2 size, Color color);                                  // Draw a color-filled rectangle (Vector version)
extern(C, cdecl64) void DrawRectangleRec(Rectangle rec, Color color);                                                 // Draw a color-filled rectangle
extern(C, cdecl64) void DrawRectanglePro(Rectangle rec, Vector2 origin, float rotation, Color color);                 // Draw a color-filled rectangle with pro parameters
extern(C, cdecl64) void DrawRectangleGradientV(int posX, int posY, int width, int height, Color color1, Color color2);// Draw a vertical-gradient-filled rectangle
extern(C, cdecl64) void DrawRectangleGradientH(int posX, int posY, int width, int height, Color color1, Color color2);// Draw a horizontal-gradient-filled rectangle
extern(C, cdecl64) void DrawRectangleGradientEx(Rectangle rec, Color col1, Color col2, Color col3, Color col4);       // Draw a gradient-filled rectangle with custom vertex colors
extern(C, cdecl64) void DrawRectangleLines(int posX, int posY, int width, int height, Color color);                   // Draw rectangle outline
extern(C, cdecl64) void DrawRectangleLinesEx(Rectangle rec, float lineThick, Color color);                            // Draw rectangle outline with extended parameters
extern(C, cdecl64) void DrawRectangleRounded(Rectangle rec, float roundness, int segments, Color color);              // Draw rectangle with rounded edges
extern(C, cdecl64) void DrawRectangleRoundedLines(Rectangle rec, float roundness, int segments, float lineThick, Color color); // Draw rectangle with rounded edges outline
extern(C, cdecl64) void DrawTriangle(Vector2 v1, Vector2 v2, Vector2 v3, Color color);                                // Draw a color-filled triangle (vertex in counter-clockwise order!)
extern(C, cdecl64) void DrawTriangleLines(Vector2 v1, Vector2 v2, Vector2 v3, Color color);                           // Draw triangle outline (vertex in counter-clockwise order!)
extern(C, cdecl64) void DrawTriangleFan(Vector2* points, int pointCount, Color color);                                // Draw a triangle fan defined by points (first vertex is the center)
extern(C, cdecl64) void DrawTriangleStrip(Vector2* points, int pointCount, Color color);                              // Draw a triangle strip defined by points
extern(C, cdecl64) void DrawPoly(Vector2 center, int sides, float radius, float rotation, Color color);               // Draw a regular polygon (Vector version)
extern(C, cdecl64) void DrawPolyLines(Vector2 center, int sides, float radius, float rotation, Color color);          // Draw a polygon outline of n sides
extern(C, cdecl64) void DrawPolyLinesEx(Vector2 center, int sides, float radius, float rotation, float lineThick, Color color); // Draw a polygon outline of n sides with extended parameters
extern(C, cdecl64) void DrawPlane(Vector3 centerPos, Vector2 size, Color color);
extern(C, cdecl64) void DrawCube(Vector3 position, float width, float height, float length, Color color);
extern(C, cdecl64) void DrawCubeV(Vector3 position, Vector3 size, Color color);
extern(C, cdecl64) void DrawCubeWires(Vector3 position, float width, float height, float length, Color color);        // Draw cube wires
extern(C, cdecl64) void DrawCubeWiresV(Vector3 position, Vector3 size, Color color);                                  // Draw cube wires (Vector version)
extern(C, cdecl64) void DrawGrid(int slices, float spacing);
extern(C, cdecl64) Color Fade(Color color, float alpha);
// Splines drawing functions
extern(C, cdecl64) void DrawSplineLinear(Vector2* points, int pointCount, float thick, Color color);                  // Draw spline: Linear, minimum 2 points
extern(C, cdecl64) void DrawSplineBasis(Vector2* points, int pointCount, float thick, Color color);                   // Draw spline: B-Spline, minimum 4 points
extern(C, cdecl64) void DrawSplineCatmullRom(Vector2* points, int pointCount, float thick, Color color);              // Draw spline: Catmull-Rom, minimum 4 points
extern(C, cdecl64) void DrawSplineBezierQuadratic(Vector2* points, int pointCount, float thick, Color color);         // Draw spline: Quadratic Bezier, minimum 3 points (1 control point): [p1, c2, p3, c4...]
extern(C, cdecl64) void DrawSplineBezierCubic(Vector2* points, int pointCount, float thick, Color color);             // Draw spline: Cubic Bezier, minimum 4 points (2 control points): [p1, c2, c3, p4, c5, c6...]
extern(C, cdecl64) void DrawSplineSegmentLinear(Vector2 p1, Vector2 p2, float thick, Color color);                    // Draw spline segment: Linear, 2 points
extern(C, cdecl64) void DrawSplineSegmentBasis(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float thick, Color color); // Draw spline segment: B-Spline, 4 points
extern(C, cdecl64) void DrawSplineSegmentCatmullRom(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float thick, Color color); // Draw spline segment: Catmull-Rom, 4 points
extern(C, cdecl64) void DrawSplineSegmentBezierQuadratic(Vector2 p1, Vector2 c2, Vector2 p3, float thick, Color color); // Draw spline segment: Quadratic Bezier, 2 points, 1 control point
extern(C, cdecl64) void DrawSplineSegmentBezierCubic(Vector2 p1, Vector2 c2, Vector2 c3, Vector2 p4, float thick, Color color); // Draw spline segment: Cubic Bezier, 2 points, 2 control points
// Spline segment point evaluation functions, for a given t [0.0f .. 1.0f]
extern(C, cdecl64) Vector2 GetSplinePointLinear(Vector2 startPos, Vector2 endPos, float t);                           // Get (evaluate) spline point: Linear
extern(C, cdecl64) Vector2 GetSplinePointBasis(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t);              // Get (evaluate) spline point: B-Spline
extern(C, cdecl64) Vector2 GetSplinePointCatmullRom(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t);         // Get (evaluate) spline point: Catmull-Rom
extern(C, cdecl64) Vector2 GetSplinePointBezierQuad(Vector2 p1, Vector2 c2, Vector2 p3, float t);                     // Get (evaluate) spline point: Quadratic Bezier
extern(C, cdecl64) Vector2 GetSplinePointBezierCubic(Vector2 p1, Vector2 c2, Vector2 c3, Vector2 p4, float t);        // Get (evaluate) spline point: Cubic Bezier
// Basic shapes collision detection functions
extern(C, cdecl64) int CheckCollisionRecs(Rectangle rec1, Rectangle rec2);                                           // Check collision between two rectangles
extern(C, cdecl64) int CheckCollisionCircles(Vector2 center1, float radius1, Vector2 center2, float radius2);        // Check collision between two circles
extern(C, cdecl64) int CheckCollisionCircleRec(Vector2 center, float radius, Rectangle rec);                         // Check collision between circle and rectangle
extern(C, cdecl64) int CheckCollisionPointRec(Vector2 point, Rectangle rec);                                         // Check if point is inside rectangle
extern(C, cdecl64) int CheckCollisionPointCircle(Vector2 point, Vector2 center, float radius);                       // Check if point is inside circle
extern(C, cdecl64) int CheckCollisionPointTriangle(Vector2 point, Vector2 p1, Vector2 p2, Vector2 p3);               // Check if point is inside a triangle
extern(C, cdecl64) int CheckCollisionPointPoly(Vector2 point, Vector2* points, int pointCount);                      // Check if point is within a polygon described by array of vertices
extern(C, cdecl64) int CheckCollisionLines(Vector2 startPos1, Vector2 endPos1, Vector2 startPos2, Vector2 endPos2, Vector2* collisionPoint); // Check the collision between two lines defined by two points each, returns collision point by reference
extern(C, cdecl64) int CheckCollisionPointLine(Vector2 point, Vector2 p1, Vector2 p2, int threshold);                // Check if point belongs to line created between two points [p1] and [p2] with defined margin in pixels [threshold]
extern(C, cdecl64) Rectangle GetCollisionRec(Rectangle rec1, Rectangle rec2);                                         // Get collision rectangle for two rectangles collision

// Font loading/unloading functions
extern(C, cdecl64) Font GetFontDefault();                                                            // Get the default Font
extern(C, cdecl64) Font LoadFont(char* fileName);                                                  // Load font from file into GPU memory (VRAM)
extern(C, cdecl64) Font LoadFontEx(char* fileName, int fontSize, int* codepoints, int codepointCount);  // Load font from file with extended parameters, use NULL for codepoints and 0 for codepointCount to load the default character set
extern(C, cdecl64) Font LoadFontFromImage(Image image, Color key, int firstChar);                        // Load font from Image (XNA style)
extern(C, cdecl64) Font LoadFontFromMemory(char* fileType, char* fileData, int dataSize, int fontSize, int* codepoints, int codepointCount); // Load font from memory buffer, fileType refers to extension: i.e. '.ttf'
extern(C, cdecl64) char IsFontReady(Font font);                                                          // Check if a font is ready
extern(C, cdecl64) GlyphInfo* LoadFontData(char* fileData, int dataSize, int fontSize, int* codepoints, int codepointCount, int type); // Load font data for further use
extern(C, cdecl64) Image GenImageFontAtlas(GlyphInfo* glyphs, Rectangle** glyphRecs, int glyphCount, int fontSize, int padding, int packMethod); // Generate image font atlas using chars info
extern(C, cdecl64) void UnloadFontData(GlyphInfo* glyphs, int glyphCount);                               // Unload font chars info data (RAM)
extern(C, cdecl64) void UnloadFont(Font font);                                                           // Unload font from GPU memory (VRAM)
extern(C, cdecl64) int ExportFontAsCode(Font font, char* fileName);                               // Export font as code file, returns true on successextern(C, cdecl64) 
// Text drawing functions
extern(C, cdecl64) void DrawFPS(int posX, int posY);                                                     // Draw current FPS
extern(C, cdecl64) void DrawText(char* text, int posX, int posY, int fontSize, Color color);       // Draw text (using default font)
extern(C, cdecl64) void DrawTextEx(Font font, char* text, Vector2 position, float fontSize, float spacing, Color tint); // Draw text using font and additional parameters
extern(C, cdecl64) void DrawTextPro(Font font, char* text, Vector2 position, Vector2 origin, float rotation, float fontSize, float spacing, Color tint); // Draw text using Font and pro parameters (rotation)
extern(C, cdecl64) void DrawTextCodepoint(Font font, int codepoint, Vector2 position, float fontSize, Color tint); // Draw one character (codepoint)
extern(C, cdecl64) void DrawTextCodepoints(Font font, int* codepoints, int codepointCount, Vector2 position, float fontSize, float spacing, Color tint); // Draw multiple character (codepoint)extern(C, cdecl64) 
// Text font info functions
extern(C, cdecl64) void SetTextLineSpacing(int spacing);                                                 // Set vertical line spacing when drawing with line-breaks
extern(C, cdecl64) int MeasureText(char* text, int fontSize);                                      // Measure string width for default font
extern(C, cdecl64) Vector2 MeasureTextEx(Font font, char* text, float fontSize, float spacing);    // Measure string size for Font
extern(C, cdecl64) int GetGlyphIndex(Font font, int codepoint);                                          // Get glyph index position in font for a codepoint (unicode character), fallback to '?' if not found
extern(C, cdecl64) GlyphInfo GetGlyphInfo(Font font, int codepoint);                                     // Get glyph font info data for a codepoint (unicode character), fallback to '?' if not found
extern(C, cdecl64) Rectangle GetGlyphAtlasRec(Font font, int codepoint);                                 // Get glyph rectangle in font atlas for a codepoint (unicode character), fallback to '?' if not foundextern(C, cdecl64) 
// Text codepoints management functions (unicode characters)
extern(C, cdecl64) char* LoadUTF8(int* codepoints, int length);                // Load UTF-8 text encoded from codepoints array
extern(C, cdecl64) void UnloadUTF8(char* text);                                      // Unload UTF-8 text encoded from codepoints array
extern(C, cdecl64) int* LoadCodepoints(char* text, int* count);                // Load all codepoints from a UTF-8 text string, codepoints count returned by parameter
extern(C, cdecl64) void UnloadCodepoints(int* codepoints);                           // Unload codepoints data from memory
extern(C, cdecl64) int GetCodepointCount(char* text);                          // Get total number of codepoints in a UTF-8 encoded string
extern(C, cdecl64) int GetCodepoint(char* text, int* codepointSize);           // Get next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
extern(C, cdecl64) int GetCodepointNext(char* text, int* codepointSize);       // Get next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
extern(C, cdecl64) int GetCodepointPrevious(char* text, int* codepointSize);   // Get previous codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
extern(C, cdecl64) char* CodepointToUTF8(int codepoint, int* utf8Size);        // Encode one codepoint into UTF-8 byte array (array length returned as parameter)extern(C, cdecl64) 
// Text strings management functions (no UTF-8 strings, only byte chars)
// NOTE: Some strings allocate memory internally for returned strings, just be careful!
extern(C, cdecl64) int TextCopy(char* dst, char* src);                                             // Copy one string to another, returns bytes copied
extern(C, cdecl64) int TextIsEqual(char* text1, char* text2);                               // Check if two text string are equal
extern(C, cdecl64) int TextLength(char* text);                                            // Get text length, checks for '\0' ending
extern(C, cdecl64, vararg) char* TextFormat(char* text);                                        // Text formatting with variables (sprintf() style)
extern(C, cdecl64) char* TextSubtext(char* text, int position, int length);                  // Get a piece of a text string
extern(C, cdecl64) char* TextReplace(char* text, char* replace, char* by);                   // Replace text string (WARNING: memory must be freed!)
extern(C, cdecl64) char* TextInsert(char* text, char* insert, int position);                 // Insert text in a position (WARNING: memory must be freed!)
extern(C, cdecl64) char* TextJoin(char* *textList, int count, char* delimiter);        // Join text strings with delimiter
extern(C, cdecl64) char* *TextSplit(char* text, char delimiter, int* count);                 // Split text into multiple strings
extern(C, cdecl64) void TextAppend(char* text, char* append, int* position);                       // Append text at specific position and move cursor!
extern(C, cdecl64) int TextFindIndex(char* text, char* find);                                // Find first text occurrence within a string
extern(C, cdecl64) char* TextToUpper(char* text);                      // Get upper case version of provided string
extern(C, cdecl64) char* TextToLower(char* text);                      // Get lower case version of provided string
extern(C, cdecl64) char* TextToPascal(char* text);                     // Get Pascal case notation version of provided string
extern(C, cdecl64) int TextToInteger(char* text);                            // Get integer value from text (negative values not supported)

// Audio device management functions
extern(C, cdecl64) void InitAudioDevice();                                     // Initialize audio device and context
extern(C, cdecl64) void CloseAudioDevice();                                    // Close the audio device and context
extern(C, cdecl64) char IsAudioDeviceReady();                                  // Check if audio device has been initialized successfully
extern(C, cdecl64) void SetMasterVolume(float volume);                             // Set master volume (listener)
extern(C, cdecl64) float GetMasterVolume();                                    // Get master volume (listener)extern(C, cdecl64) 
// Wave/Sound loading/unloading functions
extern(C, cdecl64) Wave LoadWave(char* fileName);                            // Load wave data from file
extern(C, cdecl64) Wave LoadWaveFromMemory(char* fileType, char* fileData, int dataSize); // Load wave from memory buffer, fileType refers to extension: i.e. '.wav'
extern(C, cdecl64) char IsWaveReady(Wave wave);                                    // Checks if wave data is ready
extern(C, cdecl64) Sound LoadSound(char* fileName);                          // Load sound from file
extern(C, cdecl64) Sound LoadSoundFromWave(Wave wave);                             // Load sound from wave data
extern(C, cdecl64) Sound LoadSoundAlias(Sound source);                             // Create a new sound that shares the same sample data as the source sound, does not own the sound data
extern(C, cdecl64) char IsSoundReady(Sound sound);                                 // Checks if a sound is ready
extern(C, cdecl64) void UpdateSound(Sound sound, void *data, int sampleCount); // Update sound buffer with new data
extern(C, cdecl64) void UnloadWave(Wave wave);                                     // Unload wave data
extern(C, cdecl64) void UnloadSound(Sound sound);                                  // Unload sound
extern(C, cdecl64) void UnloadSoundAlias(Sound alias);                             // Unload a sound alias (does not deallocate sample data)
extern(C, cdecl64) int ExportWave(Wave wave, char* fileName);               // Export wave data to file, returns true on success
extern(C, cdecl64) int ExportWaveAsCode(Wave wave, char* fileName);         // Export wave sample data to code (.h), returns true on successextern(C, cdecl64) 
// Wave/Sound management functions
extern(C, cdecl64) void PlaySound(Sound sound);                                    // Play a sound
extern(C, cdecl64) void StopSound(Sound sound);                                    // Stop playing a sound
extern(C, cdecl64) void PauseSound(Sound sound);                                   // Pause a sound
extern(C, cdecl64) void ResumeSound(Sound sound);                                  // Resume a paused sound
extern(C, cdecl64) char IsSoundPlaying(Sound sound);                               // Check if a sound is currently playing
extern(C, cdecl64) void SetSoundVolume(Sound sound, float volume);                 // Set volume for a sound (1.0 is max level)
extern(C, cdecl64) void SetSoundPitch(Sound sound, float pitch);                   // Set pitch for a sound (1.0 is base level)
extern(C, cdecl64) void SetSoundPan(Sound sound, float pan);                       // Set pan for a sound (0.5 is center)
extern(C, cdecl64) Wave WaveCopy(Wave wave);                                       // Copy a wave to a new wave
extern(C, cdecl64) void WaveCrop(Wave *wave, int initSample, int finalSample);     // Crop a wave to defined samples range
extern(C, cdecl64) void WaveFormat(Wave *wave, int sampleRate, int sampleSize, int channels); // Convert wave data to desired format
extern(C, cdecl64) float *LoadWaveSamples(Wave wave);                              // Load samples data from wave as a 32bit float data array
extern(C, cdecl64) void UnloadWaveSamples(float *samples);                         // Unload samples data loaded with LoadWaveSamples()extern(C, cdecl64) 
// Music management functions
extern(C, cdecl64) Music LoadMusicStream(char* fileName);                    // Load music stream from file
extern(C, cdecl64) Music LoadMusicStreamFromMemory(char* fileType, char* data, int dataSize); // Load music stream from data
extern(C, cdecl64) char IsMusicReady(Music music);                                 // Checks if a music stream is ready
extern(C, cdecl64) void UnloadMusicStream(Music music);                            // Unload music stream
extern(C, cdecl64) void PlayMusicStream(Music music);                              // Start music playing
extern(C, cdecl64) char IsMusicStreamPlaying(Music music);                         // Check if music is playing
extern(C, cdecl64) void UpdateMusicStream(Music music);                            // Updates buffers for music streaming
extern(C, cdecl64) void StopMusicStream(Music music);                              // Stop music playing
extern(C, cdecl64) void PauseMusicStream(Music music);                             // Pause music playing
extern(C, cdecl64) void ResumeMusicStream(Music music);                            // Resume playing paused music
extern(C, cdecl64) void SeekMusicStream(Music music, float position);              // Seek music to a position (in seconds)
extern(C, cdecl64) void SetMusicVolume(Music music, float volume);                 // Set volume for music (1.0 is max level)
extern(C, cdecl64) void SetMusicPitch(Music music, float pitch);                   // Set pitch for a music (1.0 is base level)
extern(C, cdecl64) void SetMusicPan(Music music, float pan);                       // Set pan for a music (0.5 is center)
extern(C, cdecl64) float GetMusicTimeLength(Music music);                          // Get music time length (in seconds)
extern(C, cdecl64) float GetMusicTimePlayed(Music music);                          // Get current music time played (in seconds)extern(C, cdecl64) 
// AudioStream management functions
extern(C, cdecl64) AudioStream LoadAudioStream(int sampleRate, int sampleSize, int channels); // Load audio stream (to stream raw audio pcm data)
extern(C, cdecl64) char IsAudioStreamReady(AudioStream stream);                    // Checks if an audio stream is ready
extern(C, cdecl64) void UnloadAudioStream(AudioStream stream);                     // Unload audio stream and free memory
extern(C, cdecl64) void UpdateAudioStream(AudioStream stream, void *data, int frameCount); // Update audio stream buffers with data
extern(C, cdecl64) char IsAudioStreamProcessed(AudioStream stream);                // Check if any audio stream buffers requires refill
extern(C, cdecl64) void PlayAudioStream(AudioStream stream);                       // Play audio stream
extern(C, cdecl64) void PauseAudioStream(AudioStream stream);                      // Pause audio stream
extern(C, cdecl64) void ResumeAudioStream(AudioStream stream);                     // Resume audio stream
extern(C, cdecl64) char IsAudioStreamPlaying(AudioStream stream);                  // Check if audio stream is playing
extern(C, cdecl64) void StopAudioStream(AudioStream stream);                       // Stop audio stream
extern(C, cdecl64) void SetAudioStreamVolume(AudioStream stream, float volume);    // Set volume for audio stream (1.0 is max level)
extern(C, cdecl64) void SetAudioStreamPitch(AudioStream stream, float pitch);      // Set pitch for audio stream (1.0 is base level)
extern(C, cdecl64) void SetAudioStreamPan(AudioStream stream, float pan);          // Set pan for audio stream (0.5 is centered)
extern(C, cdecl64) void SetAudioStreamBufferSizeDefault(int size);                 // Default size for new audio streams
extern(C, cdecl64) void SetAudioStreamCallback(AudioStream stream, void(void*, uint) callback); // Audio thread callback to request new dataextern(C, cdecl64) 
extern(C, cdecl64) void AttachAudioStreamProcessor(AudioStream stream, void(void*, uint) processor); // Attach audio stream processor to stream, receives the samples as s
extern(C, cdecl64) void DetachAudioStreamProcessor(AudioStream stream, void(void*, uint) processor); // Detach audio stream processor from streamextern(C, cdecl64) 
extern(C, cdecl64) void AttachAudioMixedProcessor(void(void*, uint) processor); // Attach audio stream processor to the entire audio pipeline, receives the samples as s
extern(C, cdecl64) void DetachAudioMixedProcessor(void(void*, uint) processor); // Detach audio stream processor from the entire audio pipeline
// Input-related functions: keyboard
extern(C, cdecl64) char IsKeyPressed(int key);                             // Check if a key has been pressed once
extern(C, cdecl64) char IsKeyPressedRepeat(int key);                       // Check if a key has been pressed again (Only PLATFORM_DESKTOP)
extern(C, cdecl64) char IsKeyDown(int key);                                // Check if a key is being pressed
extern(C, cdecl64) char IsKeyReleased(int key);                            // Check if a key has been released once
extern(C, cdecl64) char IsKeyUp(int key);                                  // Check if a key is NOT being pressed
extern(C, cdecl64) int GetKeyPressed();                                // Get key pressed (keycode), call it multiple times for keys queued, returns 0 when the queue is empty
extern(C, cdecl64) int GetCharPressed();                               // Get char pressed (unicode), call it multiple times for chars queued, returns 0 when the queue is empty

// Camera rotation
extern(C, cdecl64) void CameraYaw(Camera* camera, float angle, int rotateAroundTarget);
extern(C, cdecl64) void CameraPitch(Camera* camera, float angle, int lockView, int rotateAroundTarget, int rotateUp);
extern(C, cdecl64) void CameraRoll(Camera* camera, float angle);

extern(C, cdecl64) void UpdateCamera(Camera* camera, int mode);